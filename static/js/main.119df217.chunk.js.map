{"version":3,"sources":["actions/index.js","components/App.js","reducers/joke.js","reducers/index.js","index.js"],"names":["baseUrl","SET_RANDOM_JOKE","SET_JOKE","SET_CATEGORIES","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","search","_this$props","searchRandomJoke","searchCategories","searchJoke","state","searchQuery","setSearchQuery","e","setState","target","value","moveQuery","localStorage","getItem","removeItem","alert","_this$props2","jokeList","categories","react_default","a","createElement","className","alt","src","srcSet","type","onChange","placeholder","onClick","map","category","index","key","joke","icon_url","Component","connect","dispatch","axios","get","concat","then","res","data","query","localData","JSON","parse","result","length","setItem","stringify","initialState","arguments","undefined","action","objectSpread","toConsumableArray","combineReducers","store","createStore","rootReducer","applyMiddleware","thunkMiddleware","render","es","src_components_App","document","getElementById"],"mappings":"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","file":"static/js/main.119df217.chunk.js","sourcesContent":["import axios from 'axios'\n\nconst baseUrl = 'https://api.chucknorris.io/jokes';\n\nexport const searchRandomJoke = () => (dispatch) => {\n\treturn axios.get(`${baseUrl}/random`)\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: SET_RANDOM_JOKE,\n\t\t\t\tjokeList: res.data\n\t\t\t})\n\t\t})\n}\n\nexport const searchCategories = () => (dispatch) => {\n\treturn axios.get(`${baseUrl}/categories`)\n\t\t.then(res => {\n\t\t\tdispatch({\n\t\t\t\ttype: SET_CATEGORIES,\n\t\t\t\tcategories: res.data\n\t\t\t})\n\t\t})\n}\n\nexport const searchJoke = (query) => (dispatch) => {\n\tconst localData = JSON.parse(localStorage.getItem(query))\n\tif(localData) {\n\t\treturn dispatch({\n\t\t\t\ttype: SET_JOKE,\n\t\t\t\tjokeList: localData\n\t\t\t})\n\t}else{\n\t\treturn axios.get(`${baseUrl}/search?query=${query}`)\n\t\t\t.then(res => {\n\t\t\t\tif(res.data.result.length !== 0) {\n\t\t\t\t\tlocalStorage.setItem(query, JSON.stringify(res.data.result))\n\t\t\t\t\tdispatch({\n\t\t\t\t\t\ttype: SET_JOKE,\n\t\t\t\t\t\tjokeList: res.data.result\n\t\t\t\t\t})\n\t\t\t\t}else{\n\t\t\t\t\talert(\"Can't find any joke~\")\n\t\t\t\t}\n\t\t\t})\n\t}\n}\n\nexport const SET_RANDOM_JOKE = 'SET_RANDOM_JOKE'\nexport const SET_JOKE = 'SET_JOKE'\nexport const SET_CATEGORIES = 'SET_CATEGORIES'","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport {\n  searchRandomJoke,\n  searchCategories,\n  searchJoke\n} from '../actions'\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n       super(props)\n\n       this.state = {\n           searchQuery: '',\n       }\n\n   }\n   search = () => {\n    const { searchRandomJoke, searchCategories, searchJoke } = this.props;\n    if(this.state.searchQuery === 'random'){\n      searchRandomJoke();\n    }else if(this.state.searchQuery === 'categories'){\n      searchCategories();\n    }else{\n      searchJoke(this.state.searchQuery);\n    }\n   }\n\n   setSearchQuery = (e) => {\n    this.setState({\n      searchQuery: e.target.value\n    })\n   }\n\n   moveQuery = () => {\n    const query = localStorage.getItem(this.state.searchQuery)\n    if(!!query){\n      localStorage.removeItem(this.state.searchQuery);\n      alert(\"This query is remove~\")\n    }else{\n      alert(\"This query isn't in local!\")\n    }\n   }\n\n  render () {\n    const {jokeList, categories} = this.props;\n    return (\n      <div className=\"App\">\n        <img className=\"logo\" alt=\"Chuck Norris Jokes Api - JSON API for random Chuck Norris jokes\" src=\"https://assets.chucknorris.host/img/chucknorris_logo_coloured_small.png\" srcSet=\"https://assets.chucknorris.host/img/chucknorris_logo_coloured_small@2x.png 720w\" />\n        <div className=\"search-block\">\n          <input type=\"text\" className=\"search-input\" onChange={ this.setSearchQuery } placeholder=\"Pleace type your query~\"/>\n          <button onClick={this.search} className=\"search-button\">search</button>\n          <button onClick={this.moveQuery} className=\"remove-button\">remove query</button>\n        </div>\n        <div className=\"joke-list\">\n          <ul>\n            { this.state.searchQuery === 'categories' ?\n                categories.map((category, index) => {\n                return (\n                  <li key={index}>\n                    <p>{category}</p>\n                  </li>\n                  )\n              })\n              : jokeList.map((joke, index) => {\n                return (\n                  <li key={index}>\n                    <img src={joke.icon_url} alt=\"icon\"/>\n                    <span className=\"line\"></span>\n                    <p>{joke.value}</p>\n                  </li>\n                  )\n              })}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    searchRandomJoke: () => {\n      dispatch(searchRandomJoke());\n    },\n    searchCategories: () => {\n      dispatch(searchCategories());\n    },\n    searchJoke: (query) => {\n      dispatch(searchJoke(query));\n    },\n  };\n};\n\nconst mapStateToProps = (state) => ({\n  jokeList: state.joke.jokeList,\n  categories: state.joke.categories\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","const initialState = {\n  jokeList: [],\n  categories: []\n}\nconst joke = (state = initialState, action) => {\n  switch (action.type) {\n    case 'SET_RANDOM_JOKE':\n      return {\n        ...state,\n        jokeList: [...state.jokeList, action.jokeList]\n      }\n    case 'SET_JOKE':\n      return {\n        ...state,\n        jokeList: [...action.jokeList]\n      }\n    case 'SET_CATEGORIES':\n      return {\n        ...state,\n        categories: [...action.categories]\n      }\n    default:\n      return state\n  }\n}\n\nexport default joke\n","import { combineReducers } from 'redux'\nimport joke from './joke'\n\nexport default combineReducers({\n\tjoke\n})\n","import React from 'react'\nimport { render } from 'react-dom'\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport App from './components/App'\nimport rootReducer from './reducers'\nimport thunkMiddleware from 'redux-thunk'\n\n\nconst store = createStore(\n\trootReducer,\n\tapplyMiddleware(\n\t    thunkMiddleware\n\t  )\n\t)\n\nrender(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}